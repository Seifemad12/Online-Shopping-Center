#include<iostream>
#include<conio.h>
#include<string>

using namespace std;
const int maxOwners = 25, maxProds = 10, maxPass = 32;
int LogIndex = maxOwners;

struct Clothing
{
	char Size;
	char Type;
	string Color;
};
struct Product
{
	string productName = { 0 };
	double productPrice = 0;
	string Category;
	Clothing Clothes;
	int Quantity = 0;
};
struct shopAddress {
	string Country;
	string City;
};
struct Shop
{
	string ShopName;
	shopAddress Add1;
	string Category;
	Product products[maxProds];
};
struct ownerAddress {
	string Country;
	string City;
};
struct Owner
{
	string Name;
	int ID;
	char Password[maxPass];
	int PassNum;
	int Age;
	string Gender;
	ownerAddress Add2;
	Shop Shops;
} Owners[maxOwners];


int RegOwner();
void RegShop(int);
void OLchoice();
void OEchoice();
int Lowner();
void Eowner(int);
void ProdChoice();
void addProds(int);
void removeProds(int);
void viewProds(int);
void RegChoice();
void removeReg(int);

int main()
{
	RegChoice();
	OLchoice();
	return 0;

}

void RegChoice()
{
	int RegIndex;
	int choice;
	cout << " \n***************************************************   WELCOME  ****************************************************** \n";
	cout << "\nPress -- 1 -- To Login.\n ";
	cout << "\nPress -- 2 -- T0 Register.\n";
	cout << "\n\n Choice :  ";
	cin >> choice;
	system("cls");
	if (choice == 2) {
		do
		{

			{
				RegIndex = RegOwner();
				system("cls");
				RegShop(RegIndex);
				system("cls");
				cout << "\nPress -- 1 --  T0 Continue. \n\n";
				cout << "\nPress -- 2 --  T0 Register Again. \n\n";
				cin >> choice;
			}
		} while (choice == 2);
	}
	else
		Lowner();
}

int RegOwner()
{
	int i, j;
	char gender;
	bool flag = true;
	for (j = 0; j < maxOwners; j++)
	{
		if (Owners[j].Age == 0)
		{
			cout << "\nEnter Your Name: ";
			cin >> Owners[j].Name;
			Owners[j].ID = j + 1;
			cout << "\nYour ID Is :" << Owners[j].ID << endl;

			do
			{
				cout << "\nEnter Your Password Of At Least 6 Digits. : ";
				char a;
				for (i = 0; i < maxPass;)
				{
					a = _getch();
					if ((a >= 'a' && a <= 'z') || (a >= 'A' && a <= 'Z') || (a >= '0' && a <= '9'))

					{
						Owners[j].Password[i] = a;
						++i;
						cout << "*";
					}
					if (a == '\b' && i >= 1)

					{
						cout << "\b \b";
						--i;
					}
					if (a == '\r')
					{
						Owners[j].Password[i] = '\0';
						break;
					}
					Owners[j].PassNum = i;
				}
				cout << endl;
			} while (i <= 5);
			cout << "\nEnter Your Age : ";
			cin >> Owners[j].Age;
			cout << "\nEnter Your Gender [ M / F ] : ";
			while (flag)
			{
				cin >> gender;
				if (gender == 'M' || gender == 'm')
				{
					Owners[j].Gender = "Male";
					flag = false;
				}
				else if (gender == 'F' || gender == 'f')
				{
					Owners[j].Gender = "Female";
					flag = false;
				}
				else
				{
					cout << "Please Enter A Valid Gender [ M / F ] : ";
				}
			}
			Owners[j].Gender = gender;
			cout << "\nEnter your Address. \n\nCountry : ";
			cin >> Owners[j].Add2.Country;
			cout << "City : "; cin >> Owners[j].Add2.City;
			cout << "You Have Registered Successfully" << endl << endl;
			break;
		}
	}
	return j;
}

void RegShop(int i)
{

	string shopName;
	int categoryChoice, gameChoice, bookChoice;
	bool flag1 = true, flag2 = false, flag3 = false, flag4 = false;
	cout << "\nEnter your shop name: ";
	cin >> shopName;
	for (int j = 0; j < maxOwners; j++)
	{
		if (shopName == Owners[j].Shops.ShopName)
		{
			cout << "This Shop is already taken";
			flag1 = false;
			break;
		}

	}
	if (flag1)
	{
		Owners[i].Shops.ShopName = shopName;
		cout << "\nEnter Your Shop's Address. \n\nCountry : ";
		cin >> Owners[i].Shops.Add1.Country;
		cout << "City : ";
		cin >> Owners[i].Shops.Add1.City;
		cout << "\n\nChoose One Of Our Available Categories :\n\n[ 1 ] Phones & Tablets. \n\n[ 2 ] Electronics. \n\n[ 3 ] Makeup & Accessories. \n\n[ 4 ] Clothing. \n\n[ 5 ] Shoes & Bags. \n\n[ 7 ] Books. \n\n[ 7 ] Gaming.\n";
		cout << endl << "\nChoice : "; cin >> categoryChoice;
		do {
			switch (categoryChoice) {
			case 1:
				Owners[i].Shops.Category = "Phones&Tablets";
				break;
			case 2:
				Owners[i].Shops.Category = "Electronics";
				break;
			case 3:
				Owners[i].Shops.Category = "Makeup&Acessories";
				break;
			case 4:
				Owners[i].Shops.Category = "Clothing";
				break;
			case 5:
				Owners[i].Shops.Category = "Shoes&Bags";
				break;
			case 6:
				Owners[i].Shops.Category = "Books";
				cout << "1) Novels.\t2) Magazines.\t3) Short Stories.\n Choice :";
				cin >> bookChoice;
				do {
					switch (bookChoice) {
					case 1:
						Owners[i].Shops.Category = "Books_Novels";
						break;
					case 2:
						Owners[i].Shops.Category = "Books_Magazines";
						break;
					case 3:
						Owners[i].Shops.Category = "Books_ShortStories";
						break;
					default:
						cout << "Invalid choice.";
						flag4 = true;
						break;
					}
				} while (flag4);
				break;
			case 7:
				cout << "1) Pc Games.\t2) PS4 Games.\t3) Xbox Games.\n Choice : ";
				cin >> gameChoice;
				do {
					switch (gameChoice) {
					case 1:
						Owners[i].Shops.Category = "Gaming_PC";
						break;
					case 2:
						Owners[i].Shops.Category = "Gaming_PS4";
						break;
					case 3:
						Owners[i].Shops.Category = "Gaming_Xbox";
						break;
					default:
						cout << "Invalid choice.";
						flag3 = true;
						break;
					}
				} while (flag3);
				break;
			default:
				flag2 = true;
				cout << "Invalid Choice\n";
				cout << "choice : "; cin >> categoryChoice;
			}
		} while (flag2);
	}
}

int Lowner()
{
	int j;
	bool flag = true;
	int LogID, i;
	char LogPass[maxPass];
	cout << "\nPlease Enter Your Login Data :" << endl;
	cout << "\n\nID :";
	cin >> LogID;
	do
	{
		cout << "\nEnter your Password." << endl;
		cout << "Password : ";
		char a;
		for (j = 0;;)
		{
			a = _getch();
			if ((a >= 'a' && a <= 'z') || (a >= 'A' && a <= 'Z') || (a >= '0' && a <= '9'))
			{
				LogPass[j] = a;
				++j;
				cout << "*";
			}
			if (a == '\b' && j >= 1)
			{
				cout << "\b \b";
				--j;
			}
			if (a == '\r')
			{
				LogPass[j] = '\0';
				break;
			}
		}

	} while (j <= 5);

	for (i = 0; i < maxOwners; i++)
	{
		flag = true;
		if (j > Owners[i].PassNum || j < Owners[i].PassNum) {
			flag = false;
		}
		else if (j == Owners[i].PassNum) {
			for (int x = 0; x < Owners[i].PassNum; x++)
			{
				if (LogPass[x] != Owners[i].Password[x])
				{
					flag = false;
				}
			}
		}
		if (LogID == Owners[i].ID && (flag))
		{
			cout << "\nYou have successfully Logged In. \n";
			break;
		}
	}
	if (flag == false)
	{
		cout << "\nEither the ID or Password is incorrect" << endl;
		i = maxOwners;
	}
	return i;
}

void Eowner(int j) {
	char editchoice, gender, continuechoice;
	int regedit, shopEdit;
	bool flag = true;
	int categoryChoice, gameChoice, bookChoice;
	bool flag1 = false, flag2 = false, flag3 = false, flag4 = false;
	cout << "Editing your information\n";
	do {
		flag = true;
		cout << "Would you like to edit your registration data , your Shop data , delete your account or exit. (R/S/D/X) ? ";
		cin >> editchoice;
		if (editchoice == 'R' || editchoice == 'r')
		{
			cout << "What do you want to edit ? " << endl;
			cout << "1-Name \n2-Password \n3-Age \n4-Gender \n5-Address\n 6-Stop" << endl;
			cout << "Choice : ";
			cin >> regedit;
			switch (regedit)
			{
			case 1:
				cout << "New Name : ";
				cin >> Owners[j].Name;
				break;

			case 2:
				cout << "New Password : ";
				cin >> Owners[j].Password;
				break;

			case 3:
				cout << "New Age : ";
				cin >> Owners[j].Age;
				break;

			case 4:
				cout << "New Gender(M/F) : ";
				while (true)
				{
					cin >> gender;
					if (gender == 'M' || gender == 'm')
					{
						Owners[j].Gender = "Male";
						break;
					}
					else if (gender == 'F' || gender == 'f')
					{
						Owners[j].Gender = "Female";
						break;
					}
					else
					{
						cout << "Please enter a valid gender(M/F) : ";
					}
				}
				break;
			case 5:
				cout << "New Address.\nCountry : ";
				cin >> Owners[j].Add2.Country;
				cout << "City : "; cin >> Owners[j].Add2.City;
				break;
			case 6:
				break;
			default:
				cout << "Invalid";
				break;
			}
		}
		else if (editchoice == 'S' || editchoice == 's')
		{
			cout << "What do you want to edit ?" << endl;
			cout << "1-Shop Name \n2-Address \n3-Category \n4-Stop";
			cout << "Choice: "; cin >> shopEdit;
			do {
				switch (shopEdit)
				{
				case 1:
					cout << "New Shop Name : ";
					cin >> Owners[j].Shops.ShopName;
					break;
				case 2:
					cout << "New Shop Address.\nCountry : ";
					cin >> Owners[j].Shops.Add1.Country;
					cout << "City : "; cin >> Owners[j].Shops.Add1.City;
					break;
				case 3:
					cout << "Choose one of our available Categories : 1) Phones & Tablets. \n2) Electronics. \n3) Makeup & Accessories. \n4) Clothing. \n5) Shoes & Bags. \n6) Books. \n7)Gaming.\n";
					cout << "Choice : "; cin >> categoryChoice;
					do {
						switch (categoryChoice) {
						case 1:
							Owners[j].Shops.Category = "Phones&Tablets";
							break;
						case 2:
							Owners[j].Shops.Category = "Electronics";
							break;
						case 3:
							Owners[j].Shops.Category = "Makeup&Acessories";
							break;
						case 4:
							Owners[j].Shops.Category = "Clothing";
							break;
						case 5:
							Owners[j].Shops.Category = "Shoes&Bags";
							break;
						case 6:
							Owners[j].Shops.Category = "Books";
							cout << "1) Novels.\t2) Magazines.\t3) Short Stories.\n Choice :";
							cin >> bookChoice;
							do {
								switch (bookChoice) {
								case 1:
									Owners[j].Shops.Category = "Books_Novels";
									break;
								case 2:
									Owners[j].Shops.Category = "Books_Magazines";
									break;
								case 3:
									Owners[j].Shops.Category = "Books_ShortStories";
									break;
								default:
									cout << "Invalid choice.";
									flag4 = true;
									break;
								}
							} while (flag4);
							break;
						case 7:
							cout << "1) Pc Games.\t2) PS4 Games.\t3) Xbox Games.\n Choice : ";
							cin >> gameChoice;
							do {
								switch (gameChoice) {
								case 1:
									Owners[j].Shops.Category = "Gaming_PC";
									break;
								case 2:
									Owners[j].Shops.Category = "Gaming_PS4";
									break;
								case 3:
									Owners[j].Shops.Category = "Gaming_Xbox";
									break;
								default:
									cout << "Invalid choice.";
									flag3 = true;
									break;
								}
							} while (flag3);
							break;
						default:
							flag2 = true;
							cout << "Invalid Choice\n";
							cout << "choice : "; cin >> categoryChoice;
						}
					} while (flag2);
				case 4:
					break;
				default:
					cout << "Invalid Input";
					flag1 = true;
					break;
				}
			} while (flag1);
		}
		else if (editchoice == 'D' || editchoice == 'd')
		{
			removeReg(LogIndex);
		}
		else if (editchoice == 'X' || editchoice == 'x') {
			break;
		}
		else
		{
			cout << "Invalid Choice\n";
		}
		while (flag)
		{
			cout << "Would you like to continue (Y/N) ?";
			cin >> continuechoice;
			if (continuechoice == 'Y' || continuechoice == 'y' || continuechoice == 'N' || continuechoice == 'n')
			{
				flag = false;
			}
			else
			{
				cout << "Invalid Input";
			}
		}
	} while (continuechoice == 'Y' || continuechoice == 'y');
}

void OLchoice()
{
	char Logchoice;
	cout << "Do you want to login , (Y/N)? ";
	cin >> Logchoice;
	while (Logchoice == 'y' || Logchoice == 'Y')
	{
		LogIndex = Lowner();

		if (LogIndex == maxOwners)
		{
			cout << "Would you like to try again, (Y/N)? ";
			cin >> Logchoice;
		}
		else
		{
			Logchoice = 'n';
		}
	}
	if (LogIndex != maxOwners) {
		OEchoice();
		ProdChoice();
	}
}

void OEchoice()
{
	char Editchoice;
	if (LogIndex != maxOwners) {
		cout << "Do you want to edit your data , (Y/N)? ";
		cin >> Editchoice;
		switch (Editchoice)
		{
		case'y':
		case'Y':
			Eowner(LogIndex);
			break;
		default:
			cout << "You may continue\n";
			break;
		}
	}
}

void ProdChoice()
{
	char choice;
	do
	{
		cout << "To add a product enter A. To remove a product enter R. To view your products enter V. : ";
		char choices;
		cin >> choices;
		switch (choices)
		{
		case 'a':
		case 'A':
			addProds(LogIndex);
			break;
		case 'r':
		case 'R':
			removeProds(LogIndex);
			break;
		case 'v':
		case 'V':
			viewProds(LogIndex);
			break;
		default:
			cout << "Invalid answer";
		}
		cout << "Do you want to continue (Y/N) : ";
		cin >> choice;
		cout << endl;
	} while (choice == 'y' || choice == 'Y');
}

void addProds(int j)
{
	do
	{

		char choice;

		for (int i = 0; i <= maxProds; i++)
		{

			if (Owners[j].Shops.products[i].productPrice != 0)
			{
				continue;
			}

			else if (Owners[j].Shops.products[i].productPrice == 0)
			{

				cout << "Product's name : ";
				cin >> Owners[j].Shops.products[i].productName;

				cout << "Product's Price : $";
				cin >> Owners[j].Shops.products[i].productPrice;

				if (Owners[j].Shops.products[i].Category == "Clothing") {
					cout << "Type [ M / F ] : "; cin >> Owners[i].Shops.products[i].Clothes.Type;
					cout << "Color : "; cin >> Owners[i].Shops.products[i].Clothes.Color;
					cout << "Size [ S / M / L ] : "; cin >> Owners[i].Shops.products[i].Clothes.Size;
					cout << "Product's Category : ";
					Owners[j].Shops.products[i].Category = Owners[j].Shops.Category;
					cout << Owners[j].Shops.products[i].Category;
				}
				else {
					cout << "Product's Category : ";
					Owners[j].Shops.products[i].Category = Owners[j].Shops.Category;
					cout << Owners[j].Shops.products[i].Category << endl;
				}
				cout << "Product's Quantity : ";
				cin >> Owners[j].Shops.products[i].Quantity;

				break;
			}
		}
		cout << "Do you want to enter a product ? (Y / N) : ";
		cin >> choice;

		if (choice == 'N' || choice == 'n')
		{
			break;
		}
		else if (choice == 'Y' || choice == 'y')
		{
			continue;
		}
	} while (true);
}

void removeProds(int j)
{
	int i;
	bool same = false;
	string name;
	char choice, continuechoice;
	do
	{
		cout << "What is the name of the product you want to remove : ";
		cin >> name;
		cout << "Are you sure you want to remove this product (Y/N) ?";
		cin >> continuechoice;
		if (continuechoice == 'Y' || continuechoice == 'y')
		{
			for (i = 0; i < maxProds; i++)
			{
				if (name == Owners[j].Shops.products[i].productName)
				{
					same = true;
					break;
				}
			}
			if (same == true)
			{
				Owners[j].Shops.products[i].productName = { 0 };
				Owners[j].Shops.products[i].productPrice = 0;
				Owners[j].Shops.products[i].Quantity = 0;
				if (Owners[j].Shops.products[i].Category == "Clothing") {
					Owners[j].Shops.products[i].Clothes.Type = { 0 };
					Owners[j].Shops.products[i].Clothes.Color = { 0 };
					Owners[j].Shops.products[i].Clothes.Size = { 0 };
					Owners[j].Shops.products[i].Category = { 0 };
				}
				else {
					Owners[j].Shops.products[i].Category = { 0 };
				}
			}
			else if (same == false)
				cout << "This product doesn't exist. \n";
			cout << "\nDo you want to remove another product? (Y/N) : ";
			cin >> choice;
			if (choice == 'N' || choice == 'n')
			{
				break;
			}

			else if (choice == 'Y' || choice == 'y')
			{
				continue;
			}
			else {
				break;
			}
		}
	} while (true);

}

void viewProds(int j)
{
	char choice;
	do
	{
		cout << "Product's Name \t Product's Price \t Product's Category \t Product's Quantity \n";
		for (int i = 0; i < maxProds; i++)
		{
			if (Owners[j].Shops.products[i].productPrice != 0)
			{
				cout << Owners[j].Shops.products[i].productName << "\t \t " << Owners[j].Shops.products[i].productPrice << "$" << "\t \t \t " << Owners[j].Shops.products[i].Category << "\t  \t " << Owners[j].Shops.products[i].Quantity << endl;
			}
		}
		cout << "Do you want to view your products? (Y/N) : ";
		cin >> choice;
		if (choice == 'n' || choice == 'N')
		{
			break;
		}
		else if (choice == 'y' || choice == 'Y')
		{
			continue;
		}
	} while (true);
}

void removeReg(int j)
{
	char choice;
	cout << "You are about to delete your account , are you sure ? (Y/N)";
	cin >> choice;
	switch (choice)
	{

	case 'y':
	case 'Y':
		Owners[j].Name = { 0 };
		Owners[j].ID = 0;
		for (int i = 0; i < maxPass; i++)
		{
			Owners[j].Password[i] = { 0 };
		}
		Owners[j].Age = 0;
		Owners[j].Gender = { 0 };
		Owners[j].Add2.Country = { 0 };
		Owners[j].Add2.City = { 0 };
		Owners[j].Shops.ShopName = { 0 };
		Owners[j].Shops.Category = { 0 };
		Owners[j].Shops.Category = { 0 };
		Owners[j].Shops.Add1.Country = { 0 };
		Owners[j].Shops.Add1.City = { 0 };
		for (int i = 0; i < maxProds; i++)
		{
			Owners[j].Shops.products[i] = { 0 };
		}
		cout << "Your account has been successfully deleted" << endl;
		break;
	default:
		break;
	}
}
